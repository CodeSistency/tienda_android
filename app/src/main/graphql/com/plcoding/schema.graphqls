# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

# The `BigInt` scalar type represents non-fractional signed whole numeric values.
scalar Long

# The `Upload` scalar type represents a file upload.
scalar Upload

type Error {
  code: String!
  message: String
}

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  eqi: Long
  ne: Long
  nei: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  eqi: Date
  ne: Date
  nei: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentColorFadsfaFiltersInput {
  color: StringFilterInput
  stock: IntFilterInput
  and: [ComponentColorFadsfaFiltersInput]
  or: [ComponentColorFadsfaFiltersInput]
  not: ComponentColorFadsfaFiltersInput
}

type ComponentColorFadsfa {
  id: ID!
  color: String!
  stock: Int!
}

enum ENUM_COMPONENTTALLATALLA_TALLA {
  U
  XS
  S
  M
  L
  XL
  XL0
  XL1
  XL2
  XL3
  XL4
  XL5
  FIT
  T26
  T27
  T28
  T29
  T30
  T31
  T32
  T33
  T34
  T35
  T36
  T37
  T38
  T39
  T40
  T41
  T42
  T43
  T44
  T45
}

type ComponentTallaTalla {
  id: ID!
  talla: ENUM_COMPONENTTALLATALLA_TALLA!
  color(
    filters: ComponentColorFadsfaFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentColorFadsfa]!
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

enum ENUM_SCHEDULERSCHEDULER_TYPE {
  publish
  archive
}

input SchedulerSchedulerFiltersInput {
  id: IDFilterInput
  uid: StringFilterInput
  entryId: LongFilterInput
  type: StringFilterInput
  datetime: DateTimeFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [SchedulerSchedulerFiltersInput]
  or: [SchedulerSchedulerFiltersInput]
  not: SchedulerSchedulerFiltersInput
}

input SchedulerSchedulerInput {
  uid: String
  entryId: Long
  type: ENUM_SCHEDULERSCHEDULER_TYPE
  datetime: DateTime
}

type SchedulerScheduler {
  uid: String!
  entryId: Long!
  type: ENUM_SCHEDULERSCHEDULER_TYPE!
  datetime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type SchedulerSchedulerEntity {
  id: ID
  attributes: SchedulerScheduler
}

type SchedulerSchedulerEntityResponse {
  data: SchedulerSchedulerEntity
}

type SchedulerSchedulerEntityResponseCollection {
  data: [SchedulerSchedulerEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input CategoriaFiltersInput {
  id: IDFilterInput
  titulo: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CategoriaFiltersInput]
  or: [CategoriaFiltersInput]
  not: CategoriaFiltersInput
}

input CategoriaInput {
  titulo: String
  img: ID
  publishedAt: DateTime
}

type Categoria {
  titulo: String!
  img: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CategoriaEntity {
  id: ID
  attributes: Categoria
}

type CategoriaEntityResponse {
  data: CategoriaEntity
}

type CategoriaEntityResponseCollection {
  data: [CategoriaEntity!]!
  meta: ResponseCollectionMeta!
}

input JoseFiltersInput {
  id: IDFilterInput
  nombre: StringFilterInput
  birthday: DateFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [JoseFiltersInput]
  or: [JoseFiltersInput]
  not: JoseFiltersInput
}

input JoseInput {
  nombre: String
  birthday: Date
  imagenes: ID
  publishedAt: DateTime
}

type Jose {
  nombre: String
  birthday: Date
  imagenes: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type JoseEntity {
  id: ID
  attributes: Jose
}

type JoseEntityResponse {
  data: JoseEntity
}

type JoseEntityResponseCollection {
  data: [JoseEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_PRODUCTO_CATEGORIA {
  Camisa
  Franela
  Blusa
  Chaqueta
  Blazer
  Vestido
  Conjuntos
  Set
  Sueter
  Body
  Crop_top
  Short
  Falda
  Leggins
  Pijama
  Playa
  Mono
  Zapato
  Liquidacion
  Sobretodo
  Pantalon
}

enum ENUM_PRODUCTO_SEXO {
  Hombre
  Mujer
}

union ProductoTallaDynamicZone = ComponentTallaTalla | Error

scalar ProductoTallaDynamicZoneInput

input ProductoFiltersInput {
  id: IDFilterInput
  titulo: StringFilterInput
  categoria: StringFilterInput
  precio: FloatFilterInput
  sexo: StringFilterInput
  description: StringFilterInput
  destacado: BooleanFilterInput
  descuento: IntFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ProductoFiltersInput]
  or: [ProductoFiltersInput]
  not: ProductoFiltersInput
}

input ProductoInput {
  titulo: String
  categoria: ENUM_PRODUCTO_CATEGORIA
  imgs: [ID]
  imgPrincipal: ID
  precio: Float
  sexo: ENUM_PRODUCTO_SEXO
  description: String
  destacado: Boolean
  descuento: Int
  talla: [ProductoTallaDynamicZoneInput!]
  publishedAt: DateTime
}

type Producto {
  titulo: String!
  categoria: ENUM_PRODUCTO_CATEGORIA!
  imgs(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection!
  imgPrincipal: UploadFileEntityResponse
  precio: Float!
  sexo: ENUM_PRODUCTO_SEXO!
  description: String!
  destacado: Boolean
  descuento: Int
  talla: [ProductoTallaDynamicZone]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ProductoEntity {
  id: ID
  attributes: Producto
}

type ProductoEntityResponse {
  data: ProductoEntity
}

type ProductoEntityResponseCollection {
  data: [ProductoEntity!]!
  meta: ResponseCollectionMeta!
}

input SeccionFiltersInput {
  id: IDFilterInput
  titulo: StringFilterInput
  url: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SeccionFiltersInput]
  or: [SeccionFiltersInput]
  not: SeccionFiltersInput
}

input SeccionInput {
  titulo: String
  img: ID
  url: String
  publishedAt: DateTime
}

type Seccion {
  titulo: String!
  img: UploadFileEntityResponse!
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SeccionEntity {
  id: ID
  attributes: Seccion
}

type SeccionEntityResponse {
  data: SeccionEntity
}

type SeccionEntityResponseCollection {
  data: [SeccionEntity!]!
  meta: ResponseCollectionMeta!
}

input SliderInicioFiltersInput {
  id: IDFilterInput
  titulo: StringFilterInput
  button: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SliderInicioFiltersInput]
  or: [SliderInicioFiltersInput]
  not: SliderInicioFiltersInput
}

input SliderInicioInput {
  img: ID
  titulo: String
  button: String
  publishedAt: DateTime
}

type SliderInicio {
  img: UploadFileEntityResponse!
  titulo: String!
  button: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SliderInicioEntity {
  id: ID
  attributes: SliderInicio
}

type SliderInicioEntityResponse {
  data: SliderInicioEntity
}

type SliderInicioEntityResponseCollection {
  data: [SliderInicioEntity!]!
  meta: ResponseCollectionMeta!
}

union GenericMorph =
    ComponentColorFadsfa
  | ComponentTallaTalla
  | UploadFile
  | UploadFolder
  | SchedulerScheduler
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Categoria
  | Jose
  | Producto
  | Seccion
  | SliderInicio

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  schedulerScheduler(
    filters: SchedulerSchedulerFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): SchedulerSchedulerEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  categoria(id: ID): CategoriaEntityResponse
  categorias(
    filters: CategoriaFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CategoriaEntityResponseCollection
  jose(id: ID): JoseEntityResponse
  joses(
    filters: JoseFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): JoseEntityResponseCollection
  producto(id: ID): ProductoEntityResponse
  productos(
    filters: ProductoFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ProductoEntityResponseCollection
  seccion(id: ID): SeccionEntityResponse
  seccions(
    filters: SeccionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SeccionEntityResponseCollection
  sliderInicio(id: ID): SliderInicioEntityResponse
  sliderInicios(
    filters: SliderInicioFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SliderInicioEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createSchedulerScheduler(
    data: SchedulerSchedulerInput!
  ): SchedulerSchedulerEntityResponse
  updateSchedulerScheduler(
    id: ID!
    data: SchedulerSchedulerInput!
  ): SchedulerSchedulerEntityResponse
  deleteSchedulerScheduler(id: ID!): SchedulerSchedulerEntityResponse
  createCategoria(data: CategoriaInput!): CategoriaEntityResponse
  updateCategoria(id: ID!, data: CategoriaInput!): CategoriaEntityResponse
  deleteCategoria(id: ID!): CategoriaEntityResponse
  createJose(data: JoseInput!): JoseEntityResponse
  updateJose(id: ID!, data: JoseInput!): JoseEntityResponse
  deleteJose(id: ID!): JoseEntityResponse
  createProducto(data: ProductoInput!): ProductoEntityResponse
  updateProducto(id: ID!, data: ProductoInput!): ProductoEntityResponse
  deleteProducto(id: ID!): ProductoEntityResponse
  createSeccion(data: SeccionInput!): SeccionEntityResponse
  updateSeccion(id: ID!, data: SeccionInput!): SeccionEntityResponse
  deleteSeccion(id: ID!): SeccionEntityResponse
  createSliderInicio(data: SliderInicioInput!): SliderInicioEntityResponse
  updateSliderInicio(
    id: ID!
    data: SliderInicioInput!
  ): SliderInicioEntityResponse
  deleteSliderInicio(id: ID!): SliderInicioEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
